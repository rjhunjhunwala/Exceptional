import sys
import os

def remove_leading_spaces(string):
    string = string.replace("\t"," ")
    if not string:
        return ""
    else:
        return string if string[0]!=" " else remove_leading_spaces(string[1:])

is_giving_it_all = False

def get_rest(line):
    return line.split(" ")[1:]

def good_code(rest, in_global_scope, line):
    global is_giving_it_all
    is_giving_it_all = True
    return "//all code after this point, is done with max effort!\n"

def procedure(rest, in_global_scope, line):
    return "public static void "+rest[0]+"(){\n"
    pass

def get_brace(rest, in_global_scope, line):
    return "}\n"

def get_try(rest, in_global_scope, line):
    return "try{\n"

def get_failure(rest, in_global_scope, line):
    # return self
    # too close to home...
    return "catch(Throwable someLongThrowablesdasdashToNotPolluteNamespaceadsdsasaddassadsda){\n//gotta catch em all\n"

def get_call(rest, in_global_scope, line):
    return rest[0]+"();\n"
    pass

def get_definition(rest, in_global_scope, line):
    return "public static "* in_global_scope + {
        "INTEGER":"int ",
        "STACK":"Stack<Integer> ",
        "BUFFER":"int[] "
    }[rest[0]] + rest[1] + "="+ {
        "INTEGER":"0;\n",
        "STACK":"new Stack<>();\n",
        "BUFFER":"new int[65535];\n"
    }[rest[0]]
    pass

def get_reassignment(rest, in_global_scope, line):
    return rest[0] + "=" + rest[1] +";\n"

def get_get(rest, in_global_scope, line):
    return rest[2] + "=" + rest[0] + "[" + rest[1] + "];\n"

def get_set(rest, in_global_scope, line):
    return rest[0] + "[" + rest[1] + "]" + "=" + rest[2] +";\n"
def get_pop(rest, in_global_scope, line):
    return rest[1] + "=" + rest[0] + ".pop();\n"
def get_push(rest, in_global_scope, line):
    return rest[0]+".push("+rest[1]+");"
def get_print(rest, in_global_scope, line):
    return "System.out.print("+line[line.index(" ")+1:]+");\n"
def get_compiled_source(lines):
    """
    Creates a java file from the lines in source
    :param lines: the lines from the input file
    :return: a string which represents the java equivalent of the exceptional code
    """
    source ="""
/**
* Autogenerated code from the Exceptional compiler, https://github.com/rjhunjhunwala/Exceptional
*/
import java.util.Stack;
"""
    global is_giving_it_all

    is_giving_it_all = False

    source += "public class "+ get_class_name()+"{\n"

    depth = 0
    main_code = []

    dispatch = {"GIVE_IT_110_PERCENT!":(good_code, False),
                "PROCEDURE":(procedure, False), "END":(get_brace, False),
                "TRY!":(get_try, False), "FAIL:(":(get_failure, False),"SAD_REAX":(get_failure, False),
                "CALL":(get_call, True), "DEFINE":(get_definition, False),
                "REASSIGN":(get_reassignment, True),"GET":(get_get,True), "SET":(get_set,True),
                "POP":(get_pop, True), "PUSH":(get_push, True), "PRINT":(get_print, True),"NOTE":(lambda a,b,c:"",False)
                }
    lines = [remove_leading_spaces(line) for line in lines if remove_leading_spaces(line)]

    for line in lines:
        tokens = line.split(" ")
        if depth==0 and tokens[0]!="DEFINE" and tokens[0]!="PROCEDURE" and tokens[0]!="GIVE_IT_110_PERCENT!":
            main_code.append((line, is_giving_it_all))
        else:
            tup = dispatch[tokens[0]]
            if not is_giving_it_all and tup[1]:
                source+= "if(Math.random()<.9)\n"
            output = tup[0](tokens[1:], depth == 0, line)
            source+=output
        if tokens[0] in ["PROCEDURE","TRY!","FAIL:(","SAD_REAX"]:
            depth+=1
        if tokens[0] == "END":
            depth-=1


    source += "public static void main(String...args){\n"

    for line in main_code:
        real_line = line[0]
        if not line[1]:
            source += "if(Math.random()<.9)\n"
        output = dispatch[real_line.split(" ")[0]][0](real_line.split(" ")[1:], True, real_line)
        source += output
    source += "}\n"
    source += "}\n"
    return source

def get_class_name():
    if "." in args[0]:
        return args[0][0:args[0].index(".")]
    else:
        return args[0]

args = sys.argv[1:]

if not args or len(args)>2 or (len(args)==2 and args[1]!="-c"):
    print("Usage guidelines: (compile and run)")
    print("python3 Exceptional.py filename.exc")
    print("To only compile to a class:")
    print("python3 Exceptional.py filename.exc -c")
    print("To, then run that compiled file, run 'java filename'")
    quit(1)

try:
    file = open(args[0],"r")
    lines = file.read().split("\n")
except:
    print("Invalid file:"+args[0])
    quit(1)

compiled = get_compiled_source(lines)

out = open(get_class_name()+".java","w")
out.write(compiled)
out.close()
command = "javac "+get_class_name()+".java"
os.system(command)
if len(args)==1:
    os.system("java " + get_class_name())

