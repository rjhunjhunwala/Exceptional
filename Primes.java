
/**
* Autogenerated code from the Exceptional compiler, https://github.com/rjhunjhunwala/Exceptional
*/
import java.util.Stack;
public class Primes{
//all code after this point, is done with max effort!
public static int temp=0;
public static void print_prime_and_continue(){
try{
System.out.print(prime);
System.out.print(":");
factor=1;
factors=0;
getFactors();
try{
factors=exceptionalBuffer[2-factors];
System.out.print("Prime");
}
catch(Throwable someLongThrowablesdasdashToNotPolluteNamespaceadsdsasaddassadsda){
//gotta catch em all
System.out.print("Composite");
}
System.out.print("\n");
prime=prime+1;
temp=1/(1000-prime);
print_prime_and_continue();
}
catch(Throwable someLongThrowablesdasdashToNotPolluteNamespaceadsdsasaddassadsda){
//gotta catch em all
}
}
public static void getFactors(){
try{
try{
int mod=0;
mod=1/(prime%factor);
}
catch(Throwable someLongThrowablesdasdashToNotPolluteNamespaceadsdsasaddassadsda){
//gotta catch em all
factors=factors+1;
}
factor=factor+1;
temp=1/(prime+1-factor);
getFactors();
}
catch(Throwable someLongThrowablesdasdashToNotPolluteNamespaceadsdsasaddassadsda){
//gotta catch em all
}
}
public static int prime=0;
public static int factor=0;
public static int factors=0;
public static Stack<Integer> returnStack=new Stack<>();
public static int[] exceptionalBuffer=new int[65535];
public static void main(String...args){
prime=2;
print_prime_and_continue();
}
}
